{"version":3,"sources":["Components/Card.js","Components/CardArray.js","Components/SearchBox.js","Components/addUser.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardArray","robots","map","user","i","Components_Card","key","SearchBox","searchChange","type","placeholder","onChange","addUser","handler","add","onClick","Scroll","props","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","handleChange","evt","defineProperty","clearFiled","document","querySelector","AddUser","idc","state","length","push","username","ID","userName","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLocaleLowerCase","includes","Components_SearchBox","src_Components_Scroll","Components_CardArray","Components_addUser","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ccb69bd3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name ,email, id}) => {\r\n\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n               \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardArray = ({robots}) => {\r\n  \r\n    return (\r\n        <div>\r\n           {\r\n            robots.map((user,i) => {\r\n                return (<Card\r\n                    key={robots[i].id}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name}\r\n                    email={robots[i].email}\r\n                />)\r\n            })\r\n           } \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n              className='pa3 ba b--green bg-lightest-blue'\r\n              type='search'\r\n              placeholder='Search Box'\r\n              onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n \r\n\r\nconst addUser = ({handler,add}) => {\r\n    return(\r\n      \r\n        <div className='pa2' >\r\n        \r\n          <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='text'\r\n            id='name'\r\n            placeholder='Name'\r\n                onChange={handler}\r\n          />\r\n\r\n          <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='text'\r\n            id='userName'\r\n            placeholder='User Name'\r\n            onChange={handler} \r\n          />\r\n\r\n          <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='email'\r\n            id='email'\r\n            placeholder='Email'\r\n            onChange={handler}\r\n          />\r\n          <br />\r\n          <button className='br-pill pa2 ma2 w-10' onClick={add}>Sumbet</button>\r\n\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default addUser;","import React from 'react';\r\nimport './Scroll.css' \r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div className='scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardArray from '../Components/CardArray'\r\nimport SearchBox from '../Components/SearchBox'\r\nimport AddUser from '../Components/addUser'\r\nimport './App.css'\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots : [],\r\n            searchfield: '',\r\n            ID: '',\r\n            name: '',\r\n            userName: '',\r\n            email: ''\r\n        }\r\n       \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=>{this.setState({robots : users})})\r\n    }\r\n     onSearchChange = (event) =>{\r\n         this.setState({ searchfield:event.target.value })\r\n          }    \r\n    \r\n    handleChange = (evt)  =>{\r\n        this.setState({ [evt.target.id]: evt.target.value })\r\n    }\r\n\r\n    \r\n    clearFiled = () =>{\r\n        document.querySelector(\"#name\").value=\"\";\r\n        document.querySelector(\"#email\").value=\"\";\r\n        document.querySelector(\"#userName\").value=\"\";\r\n}\r\n    \r\n    AddUser = (event) =>{\r\n        const idc = this.state.robots.length+1;\r\n            this.state.robots.push({\r\n            id: idc,\r\n            name: this.state.name,\r\n            username: this.state.username,\r\n            email: this.state.email\r\n            \r\n        });\r\n        \r\n        this.setState(this.state);\r\n        this.clearFiled();\r\n    }\r\n\r\n   \r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\r\n            \r\n        })\r\n       return !robots.length ?\r\n            <div className='centerh'>\r\n               <h1 className='tc f1'>Loading</h1>\r\n               \r\n           </div> : \r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardArray robots={filteredRobots}/>\r\n                    </Scroll>\r\n                    <AddUser handler={this.handleChange} add={this.AddUser} />\r\n                </div>\r\n                \r\n            );\r\n            \r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,     document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}